#!/bin/bash

# Copyright (C) 2019  Constantin Clauzel <constantin.clauzel@gmail.com>
# Author: Constantin Clauzel <constantin.clauzel@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"

pushd () {
  command pushd "$@" > /dev/null
}

popd () {
  command popd "$@" > /dev/null
}

set_current () {
  if [ -n "$FORCE_CURRENT" ]; then
    CURRENT="${FORCE_CURRENT/.txt/}.txt"
  else
    if ! [ -e "$DIR/current" ]; then
      echo "Call 'daryl r' first. Or set FORCE_CURRENT variable (by doing 'FORCE_CURRENT=214124421421.txt d c' for ex, do a 'd a' to find note names)."
      exit
    fi
    CURRENT="$(cat $DIR/current)"
  fi
  FILE_PATH="$DIR/$CURRENT"
}

if [ $# -lt 1 ]; then
  echo "Cannot be called without parameters."
  echo "Please see https://github.com/vitaminwater/Daryl for some documentation."
  exit
fi

DIR="$HOME/.daryl"
DONE_DIR="$DIR/.done"

# get random note, store it as the current
if [ "$1" == "r" ]; then
  R=$(ls $DIR | grep -v current | sort -R | tail -1)
  echo -e "$(date -d @${R/.txt/}) - ${GREEN}$R${NC}"
  cat $DIR/$R
  printf "$R" > $DIR/current

# prints the current note or sets the second parameter as the new current note, second parameter should be the name of the timestamp of the note
elif [ "$1" == "c" ]; then
  # Sets the current note when second parameter is a note timestamp
  if [ $# == 2 ]; then
    NEW_CURRENT="${2/.txt/}.txt"
    if [ -e "$DIR/$NEW_CURRENT" ]; then
      printf "$NEW_CURRENT" > $DIR/current
    else
      echo -e "${RED}Can't find the note $NEW_CURRENT.${NC}"
      exit
    fi
  fi
  set_current
  echo -e "$(date -d @${CURRENT/.txt/}) - ${GREEN}$CURRENT${NC}\n$(cat $FILE_PATH)" | less -FRSXc~

# Dump all notes
elif [ "$1" == "a" ]; then
  j=1
  for i in $(ls $DIR/*.txt); do
    if [ $# == 2 ]; then
      if ! grep -q -i -E "$2" $i; then
        continue
      fi
    fi
    NOTE=$(basename $i)
    echo -e "#$j - $(date -d @${NOTE/.txt/}) - ${GREEN}$NOTE${NC}"
    cat $i
    echo "---------------------------------------"
    let j=$j+1
  done | less -FRSXc~

# open current in $EDITOR
elif [ "$1" == "e" ]; then
  if [ -z "$EDITOR" ]; then
    EDITOR=vi # default to vi ?
  fi
  set_current
  $EDITOR "$FILE_PATH"
  
# add log to a note
elif [ "$1" == "--" ]; then
  set_current
  NOTE="${@:2}"
  echo "========= Logged on $(date) =========" >> $FILE_PATH
  echo "$NOTE" >> $FILE_PATH
  echo "" >> $FILE_PATH
  echo -e "Added log to $CURRENT: ${GREEN}ok${NC}"

# end the note stored as current
elif [ "$1" == "d" ]; then
  set_current
  printf "The note $CURRENT will be ${RED}marked as done${NC}, sure ? (y/N): "
  read confirm
  if [ "$confirm" != "y" ]; then
    echo -e "${RED}Abort${NC}"
    exit
  fi

  # TODO DRY with the '--' command
  echo "========= Logged on $(date) =========" >> $FILE_PATH
  echo "Done" >> $FILE_PATH
  echo "" >> $FILE_PATH
  echo -e "Added log 'Done' to $CURRENT: ${GREEN}ok${NC}"

  mkdir -p $DONE_DIR
  mv $FILE_PATH $DONE_DIR/
  echo -e "Marked note $FILE_PATH as done: ${GREEN}ok${NC}"
  rm $DIR/current

# Github sync
elif [ "$1" == "s" ]; then
  if ! [ -e "$DIR/.git" ]; then
    echo -e "Git repository is not configured in $DIR"
    exit
  fi
  pushd $DIR
  git add .
  git commit -am 'Sync command'
  git pull
  git push
  echo -e "Syncing to $(git remote get-url origin): ${GREEN}ok${NC}"
  popd

# else create new note
else
  NOTE="$*"
  TS=`date +"%s"`
  FILE_PATH="$DIR/$TS.txt"

  mkdir -p $DIR

  printf "Creating note ${GREEN}$TS.txt${NC}, sure ? (Y/n): "
  read confirm
  if [ "$confirm" == "n" ]; then
    echo -e "${RED}Abort${NC}"
    exit
  fi

  echo $NOTE > $FILE_PATH
  echo "" >> $FILE_PATH
  echo -e "Saving as $FILE_PATH: ${GREEN}ok${NC}"

fi
